{"remainingRequest":"/fun/wedding/wedding-invitation-master/node_modules/babel-loader/lib/index.js!/fun/wedding/wedding-invitation-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/fun/wedding/wedding-invitation-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/fun/wedding/wedding-invitation-master/src/components/Executions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/fun/wedding/wedding-invitation-master/src/components/Executions.vue","mtime":1629129434000},{"path":"/fun/wedding/wedding-invitation-master/node_modules/cache-loader/dist/cjs.js","mtime":1629694811101},{"path":"/fun/wedding/wedding-invitation-master/node_modules/babel-loader/lib/index.js","mtime":1629694803773},{"path":"/fun/wedding/wedding-invitation-master/node_modules/cache-loader/dist/cjs.js","mtime":1629694811101},{"path":"/fun/wedding/wedding-invitation-master/node_modules/vue-loader/lib/index.js","mtime":1629694811776}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/fun/wedding/wedding-invitation-master/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.split\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _data from \"../mock/data\";\nexport default {\n  name: 'Executions',\n  props: ['canExecute'],\n  data: function data() {\n    return {\n      executions: _data.executions,\n      isProcessed: false,\n      isFinished: false,\n      progressBarText: '--------------------------',\n      endExecution: {\n        name: '打开中...',\n        time: '',\n        visible: false\n      }\n    };\n  },\n  computed: {\n    percentage: function percentage() {\n      var hashL = this.progressBarText.split('').filter(function (c) {\n        return c === '#';\n      }).length;\n      var l = this.progressBarText.length;\n      return Math.floor(hashL * 100 / l);\n    }\n  },\n  watch: {\n    canExecute: function canExecute(val) {\n      if (val === true) {\n        this.runExecutions();\n      }\n    }\n  },\n  updated: function updated() {\n    this.$emit('onUpdating');\n  },\n  methods: {\n    // 逐条执行命令\n    runExecutions: function () {\n      var _runExecutions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var _iterator, _step, execution;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(this.executions);\n                _context.prev = 1;\n\n                _iterator.s();\n\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 9;\n                  break;\n                }\n\n                execution = _step.value;\n                _context.next = 7;\n                return this.progressivelyRun(execution);\n\n              case 7:\n                _context.next = 3;\n                break;\n\n              case 9:\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n\n                _iterator.e(_context.t0);\n\n              case 14:\n                _context.prev = 14;\n\n                _iterator.f();\n\n                return _context.finish(14);\n\n              case 17:\n                _context.next = 19;\n                return this.successProcessing(1000);\n\n              case 19:\n                _context.next = 21;\n                return this.progressivelyRun(this.endExecution).then(function () {\n                  setTimeout(function () {\n                    _this.isFinished = true;\n\n                    _this.$emit('onFinish');\n                  }, 500);\n                });\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 11, 14, 17]]);\n      }));\n\n      function runExecutions() {\n        return _runExecutions.apply(this, arguments);\n      }\n\n      return runExecutions;\n    }(),\n    // 执行一条命令\n    progressivelyRun: function progressivelyRun(execution, customDuration) {\n      return new Promise(function (resolve) {\n        var now = new Date(),\n            duration = customDuration ? customDuration : Math.random() * 50 + 250,\n            showCode = function showCode() {\n          execution.time = now.toLocaleTimeString();\n          execution.duration = execution.duration !== undefined ? duration.toFixed(2) : undefined;\n          execution.visible = true;\n          resolve();\n        };\n\n        setTimeout(showCode, duration);\n      });\n    },\n    // 显示进度条\n    successProcessing: function successProcessing(duration) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        var start = null,\n            progressing,\n            progressingCount = 0;\n        _this2.isProcessed = true;\n\n        var step = function step(timestamp) {\n          var timeGap;\n\n          if (start === null) {\n            start = timestamp;\n          }\n\n          timeGap = timestamp - start;\n\n          if (progressingCount % 3 === 0) {\n            _this2.progressBarText = _this2.progressBarText.replace('-', '#');\n          }\n\n          progressingCount++;\n\n          if (timeGap < duration) {\n            progressing = requestAnimationFrame(step);\n          } else {\n            resolve();\n            _this2.progressBarText = _this2.progressBarText.replace(/-/g, '#');\n            cancelAnimationFrame(progressing);\n          }\n        };\n\n        progressing = requestAnimationFrame(step);\n      });\n    }\n  }\n};",{"version":3,"sources":["Executions.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"executions\">\n    <!--执行命令-->\n    <p class=\"code\" v-for=\"(execution, index) in executions\" :key=\"index\" v-show=\"execution.visible\">\n      <span class=\"addon\">~</span>\n      [<span class=\"time\">{{ execution.time }}</span>]\n      <span class=\"task\">{{ execution.name }}</span>\n      <span class=\"duration\" v-if=\"execution.duration!==undefined\">{{ execution.duration }} ms</span>\n    </p>\n    <!--进度条-->\n    <p class=\"code\" v-show=\"isProcessed\">\n      <span class=\"addon\">~</span>\n      {{ progressBarText }}\n      <span class=\"percentage\">{{ percentage }}%</span>\n    </p>\n    <!--执行命令-->\n    <p class=\"code\" v-show=\"endExecution.visible\">\n      <span class=\"addon\">~</span>\n      [<span class=\"time\">{{ endExecution.time }}</span>]\n      <span class=\"task\">{{ endExecution.name }}</span>\n    </p>\n  </div>\n</template>\n\n<script>\n  import data from '../mock/data'\n  export default {\n    name: 'Executions',\n    props: ['canExecute'],\n    data () {\n      return {\n        executions: data.executions,\n        isProcessed: false,\n        isFinished: false,\n        progressBarText: '--------------------------',\n        endExecution: {\n          name:'打开中...',\n          time: '',\n          visible: false\n        }\n      }\n    },\n    computed: {\n      percentage () {\n        const hashL = this.progressBarText.split('').filter(c => c==='#').length\n        const l = this.progressBarText.length\n        return Math.floor(hashL*100/l)\n      }\n    },\n    watch: {\n      canExecute: function (val) {\n        if (val===true) {\n          this.runExecutions()\n        }\n      }\n    },\n    updated() {\n      this.$emit('onUpdating')\n    },\n    methods: {\n      // 逐条执行命令\n      runExecutions: async function () {\n        for (const execution of this.executions) {\n          await this.progressivelyRun(execution)\n        }\n        // 执行完命令，开始显示进度条\n        await this.successProcessing(1000)\n        // 执行最后一条命令\n        await this.progressivelyRun(this.endExecution)\n          .then(() => {\n            setTimeout(() => {\n              this.isFinished = true\n              this.$emit('onFinish')\n            }, 500)\n          })\n      },\n      // 执行一条命令\n      progressivelyRun(execution, customDuration) {\n        return new Promise((resolve) => {\n          let now = new Date(),\n              duration = customDuration ? customDuration : Math.random()*50+250,\n              showCode = () => {\n                execution.time = now.toLocaleTimeString()\n                execution.duration = execution.duration !== undefined ? duration.toFixed(2) : undefined\n                execution.visible = true\n                resolve()\n              }\n          setTimeout(showCode, duration)\n        })\n      },\n      // 显示进度条\n      successProcessing(duration){\n        return new Promise((resolve) => {\n          let start = null, progressing, progressingCount = 0\n          this.isProcessed = true\n          let step = (timestamp) => {\n              let timeGap\n              if (start === null) {\n                start = timestamp\n              }\n              timeGap = timestamp - start\n              if (progressingCount%3 === 0) {\n                this.progressBarText = this.progressBarText.replace('-', '#')\n              }\n              progressingCount++\n              if (timeGap < duration) {\n                progressing = requestAnimationFrame(step)\n              } else {\n                resolve()\n                this.progressBarText = this.progressBarText.replace(/-/g, '#')\n                cancelAnimationFrame(progressing)\n              }\n            }\n          progressing = requestAnimationFrame(step)\n        });\n      }\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  .executions{\n    .addon{\n      color: #68FCFB;\n    }\n    .time{ color: #666; }\n    .task{ color: #009AB2; }\n    .duration{\n      margin-left: 10px;\n      color: #BF36B7;\n    }\n  }\n</style>"],"sourceRoot":"src/components"}]}
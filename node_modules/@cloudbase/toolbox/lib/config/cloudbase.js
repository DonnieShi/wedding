"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const jsonfile_1 = __importDefault(require("jsonfile"));
const mustache_1 = __importDefault(require("mustache"));
const cosmiconfig_1 = require("./cosmiconfig");
const error_1 = require("../error");
const DefaultCloudBaseConfig = {
    functionRoot: './functions',
    functions: []
};
function resolveCloudBaseConfig(options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const { configPath, searchFrom } = options;
        const oldTcbConfig = yield cosmiconfig_1.loadConfig({
            configPath,
            searchFrom,
            moduleName: 'tcb'
        });
        if (oldTcbConfig) {
            throw new error_1.CloudBaseError('tcbrc.json 配置文件已废弃，请使用 cloudbaserc 配置文件！');
        }
        const localCloudBaseConfig = yield cosmiconfig_1.loadConfig({
            searchFrom,
            configPath
        });
        if (localCloudBaseConfig && !localCloudBaseConfig.envId) {
            throw new error_1.CloudBaseError('无效的配置文件，配置文件必须包含环境 Id(envId) 字段');
        }
        const cloudbaseConfig = Object.assign(Object.assign({}, DefaultCloudBaseConfig), localCloudBaseConfig);
        if ((_a = cloudbaseConfig.functions) === null || _a === void 0 ? void 0 : _a.length) {
            cloudbaseConfig.functions = (_b = cloudbaseConfig.functions) === null || _b === void 0 ? void 0 : _b.map((func) => {
                if (func.config) {
                    return Object.assign(Object.assign({}, func), func.config);
                }
                else {
                    return func;
                }
            });
        }
        else {
            cloudbaseConfig.functions = [];
        }
        return cloudbaseConfig;
    });
}
exports.resolveCloudBaseConfig = resolveCloudBaseConfig;
function getEnvId(commandOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const envId = commandOptions === null || commandOptions === void 0 ? void 0 : commandOptions.envId;
        const configPath = (_a = commandOptions === null || commandOptions === void 0 ? void 0 : commandOptions.parent) === null || _a === void 0 ? void 0 : _a.configFile;
        const cloudbaseConfig = yield resolveCloudBaseConfig(configPath);
        const assignEnvId = envId || (cloudbaseConfig === null || cloudbaseConfig === void 0 ? void 0 : cloudbaseConfig.envId);
        return assignEnvId;
    });
}
exports.getEnvId = getEnvId;
exports.renderConfig = (template, view) => mustache_1.default.render(template, view);
class ConfigParser {
    constructor(options) {
        const { cwd, cover = true, configPath } = options;
        this.cover = cover;
        this.configPath = configPath;
        this.cwd = cwd || process.cwd();
    }
    static get(options, key, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ConfigParser.instance) {
                ConfigParser.instance = new ConfigParser(options);
            }
            return this.instance.options(options).get(key, defaultValue);
        });
    }
    static update(options, key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ConfigParser.instance) {
                ConfigParser.instance = new ConfigParser(options);
            }
            return this.instance.options(options).update(key, value);
        });
    }
    get(key, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield this.resolveConfig();
            if (!key) {
                return config;
            }
            return lodash_1.default.get(config, key, defaultValue);
        });
    }
    update(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield this.resolveConfig();
            let assignConfig;
            if (typeof value === 'undefined' && typeof key === 'object') {
                assignConfig = Object.assign(Object.assign({}, config), key);
            }
            else {
                assignConfig = lodash_1.default.set(config, key, value);
            }
            yield this.writeConfig(assignConfig);
        });
    }
    resolveConfig(searchFrom = this.cwd, configPath = this.configPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const rawConfig = yield resolveCloudBaseConfig({
                searchFrom,
                configPath
            });
            let config = rawConfig;
            if (config.version) {
                let configString = JSON.stringify(rawConfig);
                configString = exports.renderConfig(configString, {});
                config = JSON.parse(configString);
            }
            return config;
        });
    }
    writeConfig(config, cover = this.cover) {
        return __awaiter(this, void 0, void 0, function* () {
            const configPath = path_1.default.join(this.cwd, '.cloudbaserc.json');
            const localCloudBaseConfig = yield cosmiconfig_1.loadConfig({
                configPath
            });
            const newConfig = cover
                ? Object.assign(Object.assign({}, localCloudBaseConfig), { config }) : Object.assign(Object.assign({}, config), localCloudBaseConfig);
            jsonfile_1.default.riteFileSync(configPath, newConfig, { spaces: 2 });
        });
    }
    options(options) {
        const { cwd, cover = true, configPath } = options;
        this.cover = cover;
        this.configPath = configPath;
        this.cwd = cwd;
        return this;
    }
}
exports.ConfigParser = ConfigParser;

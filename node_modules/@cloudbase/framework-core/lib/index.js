"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const figlet_1 = __importDefault(require("figlet"));
const chalk_1 = __importDefault(require("chalk"));
const link_1 = require("./utils/link");
const gradient = require("gradient-string");
chalk_1.default.level = 1;
const plugin_manager_1 = __importDefault(require("./plugin-manager"));
const resolve_config_1 = __importDefault(require("./config/resolve-config"));
const context_1 = __importDefault(require("./context"));
const logger_1 = __importDefault(require("./logger"));
const sam_1 = require("./sam");
var plugin_1 = require("./plugin");
exports.Plugin = plugin_1.default;
var plugin_sevice_api_1 = require("./plugin-sevice-api");
exports.PluginServiceApi = plugin_sevice_api_1.default;
var builder_1 = require("./builder");
exports.Builder = builder_1.Builder;
var deployer_1 = require("./deployer");
exports.Deployer = deployer_1.Deployer;
__export(require("./types"));
const packageInfo = require("../package");
const SUPPORT_COMMANDS = ["deploy", "compile"];
function run({ projectPath, cloudbaseConfig, logLevel = "info", config, resourceProviders, }, command = "deploy", module) {
    return __awaiter(this, void 0, void 0, function* () {
        const logger = logger_1.default(logLevel);
        try {
            const data = yield util_1.promisify(figlet_1.default.text)(" CloudBase Framework ", {
                font: "Slant",
            });
            console.log(chalk_1.default.bold(
            // chalk.bgBlack(
            gradient(["cyan", "rgb(0, 111, 150)", "rgb(0, 246,136)"]).multiline(data + "\n")
            // )
            ));
        }
        catch (e) { }
        logger.info(`Version ${chalk_1.default.green(`v${packageInfo.version}`)}`);
        logger.info(`Github: ${link_1.genClickableLink("https://github.com/TencentCloudBase/cloudbase-framework")}
`);
        if (!projectPath || !cloudbaseConfig) {
            throw new Error("CloudBase Framework: config info missing");
        }
        const appConfig = yield resolve_config_1.default(projectPath, config);
        if (!appConfig) {
            logger.info("⚠️ 未识别到框架配置");
            return;
        }
        const context = new context_1.default({
            appConfig,
            projectConfig: config,
            cloudbaseConfig,
            projectPath,
            logLevel,
            resourceProviders,
        });
        const pluginManager = new plugin_manager_1.default(context);
        if (!SUPPORT_COMMANDS.includes(command)) {
            throw new Error(`CloudBase Framwork: not support command '${command}'`);
        }
        if (command === "deploy") {
            yield pluginManager.init(module);
            yield pluginManager.build(module);
            yield pluginManager.deploy(module);
        }
        else if (command === "compile") {
            yield pluginManager.init(module);
            yield pluginManager.build(module);
            const compileResult = yield pluginManager.compile(module);
            sam_1.genSAM(projectPath, ...JSON.parse(JSON.stringify(compileResult)));
        }
        logger.info("✨ done");
    });
}
exports.run = run;

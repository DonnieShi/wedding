"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const detect_frameworks_1 = require("../detect-frameworks");
const inquirer_1 = __importDefault(require("inquirer"));
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const path_1 = __importDefault(require("path"));
chalk_1.default.level = 1;
const FRAMEWORK_CONFIG_FILENAME = "cloudbase-framework.json";
function resolveConfig(projectPath, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const independentFrameworkConfig = readFrameworkConfig(projectPath);
        let finalFrameworkConfig = independentFrameworkConfig || (config === null || config === void 0 ? void 0 : config.framework);
        if (!finalFrameworkConfig) {
            const deteactedFrameworks = yield detect_frameworks_1.detect(projectPath, config);
            let plugins = {};
            if (deteactedFrameworks.length) {
                for (let item of deteactedFrameworks) {
                    const anwser = yield promptModify(item);
                    let inputs;
                    if (anwser.isModifyConfig) {
                        inputs = yield modifyFrameworkConfig(item.config);
                    }
                    else {
                        inputs = Object.entries(item.config).reduce((prev, cur) => {
                            prev[cur[0]] = cur[1].value;
                            return prev;
                        }, {});
                    }
                    plugins[item.key] = {
                        use: item.plugin,
                        inputs,
                    };
                }
            }
            finalFrameworkConfig = {
                plugins,
            };
            // 是否写入配置文件
            const anwser = yield promptWriteConfig();
            if (anwser.isWriteConfig) {
                yield writeConfig(projectPath, config, finalFrameworkConfig);
            }
        }
        return finalFrameworkConfig;
    });
}
exports.default = resolveConfig;
function promptModify(framework) {
    return inquirer_1.default.prompt({
        type: "confirm",
        name: "isModifyConfig",
        message: `检测到当前项目包含 ${framework.name} 项目

${formatFrameworkConfig(framework.config)}

  是否需要修改默认配置`,
        default: false,
    });
}
function promptWriteConfig() {
    return inquirer_1.default.prompt({
        type: "confirm",
        name: "isWriteConfig",
        message: `是否需要保存当前项目配置，保存配置之后下次不会再次询问`,
    });
}
function formatFrameworkConfig(config) {
    return Object.entries(config)
        .map(([, config]) => `  ${config.desc} \`${chalk_1.default.green(config.value)}\``)
        .join("\n");
}
function modifyFrameworkConfig(frameworkConfig) {
    return inquirer_1.default.prompt(Object.entries(frameworkConfig).map(([, config]) => {
        return {
            type: "input",
            name: config.desc,
            default: config.value,
        };
    }));
}
function writeConfig(projectPath, config, frameworkConfig) {
    const configJsonPath = path_1.default.join(projectPath, "cloudbaserc.json");
    if (fs_1.default.existsSync(configJsonPath)) {
        fs_1.default.writeFileSync(configJsonPath, JSON.stringify(lodash_merge_1.default({}, config, { framework: frameworkConfig }), null, 4));
    }
    else {
        fs_1.default.writeFileSync(path_1.default.join(projectPath, FRAMEWORK_CONFIG_FILENAME), JSON.stringify(frameworkConfig, null, 4));
    }
}
function readFrameworkConfig(projectPath) {
    let config;
    try {
        config = JSON.parse(fs_1.default.readFileSync(path_1.default.join(projectPath, FRAMEWORK_CONFIG_FILENAME), "utf8"));
    }
    catch (e) { }
    return config;
}

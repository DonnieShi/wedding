import Context from "../context";
import Plugin from "../plugin";
import PluginServiceApi from "../plugin-sevice-api";
interface PluginData {
    id: string;
    name: string;
    inputs: any;
    pluginInstance?: Plugin;
    api?: PluginServiceApi;
}
/**
 * 插件管理器
 *
 * @description 管理插件的生命周期，为插件注入 api 和参数
 */
export default class PluginManager {
    context: Context;
    plugins: PluginData[];
    pluginRegisty: string;
    constructor(context: Context);
    /**
     * 构建
     *
     * @param id
     */
    init(id?: string): Promise<any[]>;
    /**
     * 构建
     *
     * @param id
     */
    build(id?: string): Promise<any[]>;
    /**
     * 部署
     *
     * @param id
     */
    compile(id?: string): Promise<any[]>;
    /**
     * 部署
     *
     * @param id
     */
    deploy(id?: string): Promise<any[]>;
    /**
     * 调用插件钩子
     * @param id
     */
    private callPluginHook;
    /**
     * 解析插件
     * @param config
     */
    private resolvePlugins;
    /**
     * 加载插件代码
     *
     * @param pluginData
     */
    private loadPlugin;
    /**
     * 筛选插件
     * @param id
     */
    private pickPlugins;
    /**
     * 通过 NPM 安装插件
     *
     * 全局安装是考虑其他非 JavaScript 项目底下尽量不产生 node_modules
     *
     * @param packageName
     */
    private installPackageFromNpm;
    /**
     * 初始化插件仓库
     */
    initRegistry(): void;
}
export {};
//# sourceMappingURL=index.d.ts.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const npm_1 = __importDefault(require("npm"));
const util_1 = require("util");
const plugin_sevice_api_1 = __importDefault(require("../plugin-sevice-api"));
/**
 * 插件管理器
 *
 * @description 管理插件的生命周期，为插件注入 api 和参数
 */
class PluginManager {
    constructor(context) {
        this.context = context;
        this.plugins = this.resolvePlugins(this.context.appConfig);
        this.pluginRegisty = path_1.default.join(os_1.default.homedir(), ".cloudbase-framework/registry");
        this.initRegistry();
    }
    /**
     * 构建
     *
     * @param id
     */
    init(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.callPluginHook("init", {
                id,
            });
        });
    }
    /**
     * 构建
     *
     * @param id
     */
    build(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.callPluginHook("build", {
                id,
                icon: "🔨",
            });
        });
    }
    /**
     * 部署
     *
     * @param id
     */
    compile(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.callPluginHook("compile", {
                id,
                icon: "🧬",
            });
        });
    }
    /**
     * 部署
     *
     * @param id
     */
    deploy(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.callPluginHook("deploy", {
                id,
                icon: "🚀",
            });
        });
    }
    /**
     * 调用插件钩子
     * @param id
     */
    callPluginHook(hook, { id, params, icon }) {
        return Promise.all(this.pickPlugins(id).map((pluginData) => __awaiter(this, void 0, void 0, function* () {
            const pluginInstance = yield this.loadPlugin(pluginData);
            if (typeof pluginInstance[hook] !== "function") {
                return;
            }
            this.context.logger.info(`${icon || "🔧"} ${hook}: ${pluginData.id}...`);
            return pluginInstance[hook](params);
        })));
    }
    /**
     * 解析插件
     * @param config
     */
    resolvePlugins(config) {
        const allPlugins = Object.entries(config.plugins).map(([id, pluginConfig]) => {
            const { use, inputs } = pluginConfig;
            return {
                id,
                name: use,
                inputs: inputs,
            };
        });
        return allPlugins;
    }
    /**
     * 加载插件代码
     *
     * @param pluginData
     */
    loadPlugin(pluginData) {
        return __awaiter(this, void 0, void 0, function* () {
            if (pluginData.pluginInstance) {
                return pluginData.pluginInstance;
            }
            let PluginCode;
            try {
                PluginCode = require(path_1.default.join(this.pluginRegisty, "node_modules", pluginData.name)).plugin;
            }
            catch (e) {
                this.context.logger.debug(e);
                PluginCode = undefined;
            }
            if (typeof PluginCode === "undefined") {
                try {
                    yield this.installPackageFromNpm(pluginData.name);
                }
                catch (e) {
                    this.context.logger.error(e);
                    throw new Error(`CloudBase Framwork: can't install plugin npm package '${pluginData.name}'`);
                }
                try {
                    PluginCode = require(path_1.default.join(this.pluginRegisty, "node_modules", pluginData.name)).plugin;
                }
                catch (e) {
                    this.context.logger.error(e);
                    throw new Error(`CloudBase Framwork: can't find plugin '${pluginData.name}'`);
                }
            }
            if (!PluginCode) {
                this.context.logger.error(`CloudBase Framwork: plugin '${pluginData.name}' isn't a valid plugin`);
                throw new Error(`CloudBase Framwork: plugin '${pluginData.name}' isn't a valid plugin`);
            }
            pluginData.pluginInstance = new PluginCode(pluginData.name, new plugin_sevice_api_1.default(this), pluginData.inputs);
            return pluginData.pluginInstance;
        });
    }
    /**
     * 筛选插件
     * @param id
     */
    pickPlugins(id) {
        return id
            ? this.plugins.filter((plugin) => plugin.id === id)
            : this.plugins;
    }
    /**
     * 通过 NPM 安装插件
     *
     * 全局安装是考虑其他非 JavaScript 项目底下尽量不产生 node_modules
     *
     * @param packageName
     */
    installPackageFromNpm(packageName) {
        return __awaiter(this, void 0, void 0, function* () {
            const cwd = process.cwd();
            process.chdir(this.pluginRegisty);
            yield util_1.promisify(npm_1.default.load)({});
            yield util_1.promisify(npm_1.default.commands.install)([packageName + "@latest"]);
            process.chdir(cwd);
        });
    }
    /**
     * 初始化插件仓库
     */
    initRegistry() {
        if (!fs_1.default.existsSync(this.pluginRegisty)) {
            fs_1.default.mkdirSync(this.pluginRegisty, { recursive: true });
        }
        const packageJSON = path_1.default.join(this.pluginRegisty, "package.json");
        if (!fs_1.default.existsSync(packageJSON)) {
            fs_1.default.writeFileSync(packageJSON, JSON.stringify({
                name: "cloudbase-framework-registry",
            }));
        }
    }
}
exports.default = PluginManager;

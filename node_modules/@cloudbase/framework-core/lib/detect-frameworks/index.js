"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const frameworks_1 = __importDefault(require("./frameworks"));
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const logger_1 = __importDefault(require("../logger"));
const logger = logger_1.default();
function detect(projectRootPath, projectConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        let frameworks = [];
        const finalFrameworksInfo = renderFrameworkConfig(frameworks_1.default, {
            projectConfig,
        });
        for (const framework of finalFrameworksInfo) {
            for (const detect of framework.detect) {
                try {
                    const { path, match, exists } = detect;
                    let matchedFramework;
                    if (typeof match !== "undefined") {
                        const content = yield fs_1.default.promises.readFile(path_1.resolve(projectRootPath, path), "utf-8");
                        const matchResult = content.match(new RegExp(match));
                        if (matchResult) {
                            matchedFramework = matchResult;
                        }
                    }
                    else if (typeof exists === "boolean") {
                        const fileExists = fs_1.default.existsSync(path_1.resolve(projectRootPath, path));
                        matchedFramework = exists ? fileExists : !fileExists;
                    }
                    if (matchedFramework) {
                        if (frameworks.findIndex((item) => item.plugin === framework.plugin) < 0) {
                            frameworks.push(framework);
                        }
                    }
                }
                catch (e) {
                    logger.debug(e);
                }
            }
        }
        return frameworks;
    });
}
exports.detect = detect;
function renderFrameworkConfig(frameworkConfig, data) {
    if (!frameworks_1.default)
        return;
    return JSON.parse(JSON.stringify(frameworkConfig, (key, value) => {
        if (typeof value === "string" && value.includes("`")) {
            return new Function("data", "return " + value)(data);
        }
        else {
            return value;
        }
    }));
}
